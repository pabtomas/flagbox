#!/usr/bin/env bash

# https://github.com/dylanaraps/pure-bash-bible/blob/master/README.md#remove-duplicate-array-elements
uniq () {
  declare -A TMP_ARRAY

  for I in "$@"; do
    [[ ${I} ]] && IFS=" " TMP_ARRAY["${I:- }"]=1
  done

  printf '%s\n' "${!TMP_ARRAY[@]}"
}

# https://github.com/dylanaraps/pure-bash-bible/blob/master/README.md#use-regex-on-a-string
escaped_exact_regex () {
  local ESC=$(while IFS= read -n1 CHAR;
    do printf "\\%s" "${CHAR}"; done < <(echo -n "${2}"))

  local REG="^(${ESC})$|^(${ESC})["$'\n'"]|["$'\n'"](${ESC})$|["$'\n'"](${ESC})["$'\n'"]"

  [[ "${1}" =~ ${REG} ]] && printf '%s\n' "${BASH_REMATCH[1]:-${BASH_REMATCH[2]:-${BASH_REMATCH[3]:-${BASH_REMATCH[4]}}}}"
}

main () {

  read -r -d '.' ELAPSED < /proc/uptime
  declare -r NOW=$(printf "%(%s)T\n" "-1")
  declare -r BOOT=$(( ${NOW} - ${ELAPSED} ))

  declare -r CACHE="${HOME}/.cache/flagbox"
  mkdir -p ${CACHE}

  local SOURCE="false"
  local CHAIN=""
  local FILE=""

# Options {{{1

  if [[ ${#} -eq 0 ]]; then
    SOURCE="true"
  else
    if [[ ! -f "${PPID}" ]]; then
      echo -e "You have to initialize Flagbox before using it." >&2
      exit 1
    else
      read -r TIMESTAMP < ${PPID}
      if [[ ${TIMESTAMP} -lt ${BOOT} ]]; then
        echo -e "You have to initialize Flagbox before using it." >&2
        exit 1
      fi
    fi
    if [[ ${#} -eq 1 && ${#1} -le ${FLAGBOX_SIZE} \
      && "x${1//[01]}" == "x" ]]; then
        CHAIN="${1}"
    elif [[ ${#} -eq 2 && "${1}" == "11" \
      && "x${2//[${FILE_AUTHORIZED}]}" == "x" ]]; then
        CHAIN="11"
        FILE="${2}"
    else
      echo -e "help" >&2
      exit 1
    fi
  fi

# }}}

  declare -r RED="\e[38;5;1m"
  declare -r GREEN="\e[38;5;2m"
  declare -r YELLOW="\e[38;5;3m"
  declare -r REVERSE="\e[38;5;0m\e[48;5;7m\e[1m"
  declare -r RESET="\e[m"

  declare -A FLAGBOX

  if [[ "${SOURCE}" == "true" ]]; then
# Sourcing {{{1

    for FILE in ${CACHE}/*; do
      if [[ -r ${FILE} ]]; then
        read -r TIMESTAMP < ${FILE}
        [[ ${TIMESTAMP} -lt ${BOOT} ]] && rm -f ${FILE}
      fi
    done

#   Default user variables {{{2

    declare -r DEFAULT_SIZE=3
    declare -r DEFAULT_KEY1=","
    declare -r DEFAULT_KEY2="?"
    declare -r DEFAULT_DECIMAL_NAVMODE="false"
    declare -r DEFAULT_BACKUPCONFIRM="true"
    declare -r DEFAULT_VINSERT="false"
    declare -r DEFAULT_VNAV="true"
    declare -r DEFAULT_VRESET="false"
    declare -r DEFAULT_VRESTORE="true"
    declare -r DEFAULT_FOLDLISTING="false"

    FLAGBOX_SIZE=${FLAGBOX_SIZE:=${DEFAULT_SIZE}}
    FLAGBOX_KEY1="${FLAGBOX_KEY1:=${DEFAULT_KEY1}}"
    FLAGBOX_KEY2="${FLAGBOX_KEY2:=${DEFAULT_KEY2}}"

#   }}}

    local NAME=""

#   Check user variables {{{2

    if [[ "x${FLAGBOX_SIZE//[0-9]}" != "x" ]]; then
      echo -e "FLAGBOX_SIZE ${RED}has to be a positive integer${RESET}" >&2
      return 1
    fi

    if [[ ${FLAGBOX_SIZE} -lt 3 ]]; then
      echo -e "FLAGBOX_SIZE ${RED}has to be greater or equal to${RESET} 3" >&2
      return 1
    fi

    if [[ ${#FLAGBOX_KEY1} -ne 1 ]]; then
      echo -e "FLAGBOX_KEY1 ${RED}must be a single character${RESET}" >&2
      return 1
    fi

    if [[ "x${FLAGBOX_KEY1//[[:space:]]}" == "x" ]]; then
      echo -e "FLAGBOX_KEY1 ${RED}must be different than a space character" >&2
      return 1
    fi

    if [[ "x${FLAGBOX_KEY1//[${PROHIBITED_KEY}])}" == "x" ]]; then
      echo -e "${YELLOW}Your are highly discouraged to use one of those characters for ${RESET}FLAGBOX_KEY1${YELLOW} or ${RESET}FLAGBOX_KEY2${YELLOW}:${RESET} ${PROHIBITED_KEY}"
    fi

    if [[ "${FLAGBOX_DECIMAL_NAVMODE:=${DEFAULT_DECIMAL_NAVMODE}}" == "true" \
      && "x${FLAGBOX_KEY1//[0-9]}" == "x" ]]; then
        echo -e "${RED}if${RESET} FLAGBOX_DECIMAL_NAVMODE ${RED}is${RESET} true ${RED},${RESET} FLAGBOX_KEY1 ${RED}can not be a digit character${RESET}" >&2
    fi

    if [[ ${#FLAGBOX_KEY2} -ne 1 ]]; then
      echo -e "FLAGBOX_KEY2 ${RED}must be a single character${RESET}" >&2
      return 1
    fi

    if [[ "x${FLAGBOX_KEY2//[[:space:]]}" == "x" ]]; then
      echo -e "FLAGBOX_KEY2 ${RED}must be different than a space character" >&2
      return 1
    fi

    if [[ "x${FLAGBOX_KEY2//[${PROHIBITED_KEY}]}" == "x" ]]; then
      echo -e "${YELLOW}Your are highly discouraged to use one of those characters for ${RESET}FLAGBOX_KEY2${YELLOW} or ${RESET}FLAGBOX_KEY2${YELLOW}:${RESET} ${PROHIBITED_KEY}"
    fi

    if [[ "${FLAGBOX_DECIMAL_NAVMODE}" == "true" \
      && "x${FLAGBOX_KEY2//[0-9]}" == "x" ]]; then
        echo -e "${RED}if${RESET} FLAGBOX_DECIMAL_NAVMODE ${RED}is${RESET} true ${RED},${RESET} FLAGBOX_KEY2 ${RED}can not be a digit character${RESET}" >&2
    fi

    if [[ "${FLAGBOX_KEY1}" == "${FLAGBOX_KEY2}" ]]; then
      echo -e "FLAGBOX_KEY2 ${RED}and${RESET} FLAGBOX_KEY1 ${RED}have to be different${RESET}" >&2
      return 1
    fi

    declare -a BIN=( $(
      I=1
      J=$(echo {0..1})
      while [[ ${I} -lt ${FLAGBOX_SIZE} ]]; do
        J=$(for K in ${J}; do
              B=$(echo ${K}{0..1})
              echo "${B//[[:space:]]/$'\n'}"
            done)
        (( I+=1 ))
      done
      echo "${J}"
    ) )

    local CHAINS="0 1 00 01 10 11"
    CHAINS="${CHAINS//0/${FLAGBOX_KEY1}}"
    CHAINS="${CHAINS//1/${FLAGBOX_KEY2}}"
    CHAINS="${CHAINS} ${BIN[@]}"
    IFS=$'\n' read -d "" -ra COMP < <(compgen -c)
    COMP=$(uniq ${COMP[@]})
    local DUP=""
    for ALIAS_CHAIN in ${CHAINS}; do
      DUP=$(escaped_exact_regex "${COMP}" "${ALIAS_CHAIN}")
      if [[ ${#DUP} -gt 0 ]]; then
        echo -e "${YELLOW}Your are highly discouraged to use those characters for${RESET} FLAGBOX_KEY1 ${YELLOW}and${RESET} FLAGBOX_KEY2${YELLOW}. Generating aliases with those characters will hide this command:${RESET}\n${DUP}" > $(mktemp)
      fi
    done

    if [[ "${FLAGBOX_DECIMAL_NAVMODE}" != "false" \
      && "${FLAGBOX_DECIMAL_NAVMODE}" != "true" ]]; then
        echo -e "FLAGBOX_DECIMAL_NAVMODE ${RED}should be${RESET} true ${RED}or${RESET} false" >&2
        return 1
    fi

    if [[ "${FLAGBOX_BACKUPCONFIRM:=${DEFAULT_BACKUPCONFIRM}}" != "false" \
      && "${FLAGBOX_BACKUPCONFIRM}" != "true" ]]; then
        echo -e "FLAGBOX_BACKUPCONFIRM ${RED}should be${RESET} true ${RED}or${RESET} false" >&2
        return 1
    fi

    if [[ "${FLAGBOX_VINSERT:=${DEFAULT_VINSERT}}" != "false" \
      && "${FLAGBOX_VINSERT}" != "true" ]]; then
        echo -e "FLAGBOX_VINSERT ${RED}should be${RESET} true ${RED}or${RESET} false" >&2
        return 1
    fi

    if [[ "${FLAGBOX_VNAV:=${DEFAULT_VNAV}}" != "false" \
      && "${FLAGBOX_VNAV}" != "true" ]]; then
        echo -e "FLAGBOX_VNAV ${RED}should be${RESET} true ${RED}or${RESET} false" >&2
        return 1
    fi

    if [[ "${FLAGBOX_VRESET:=${DEFAULT_VRESET}}" != "false" \
      && "${FLAGBOX_VRESET}" != "true" ]]; then
        echo -e "FLAGBOX_VRESET ${RED}should be${RESET} true ${RED}or${RESET} false" >&2
        return 1
    fi

    if [[ "${FLAGBOX_VRESTORE:=${DEFAULT_VRESTORE}}" != "false" \
      && "${FLAGBOX_VRESTORE}" != "true" ]]; then
        echo -e "FLAGBOX_VRESTORE ${RED}should be${RESET} true ${RED}or${RESET} false" >&2
        return 1
    fi

    if [[ "${FLAGBOX_FOLDLISTING:=${DEFAULT_FOLDLISTING}}" != "false" \
      && "${FLAGBOX_FOLDLISTING}" != "true" ]]; then
        echo -e "FLAGBOX_FOLDLISTING ${RED}should be${RESET} true ${RED}or${RESET} false" >&2
        return 1
    fi

#   }}}

    FLAGBOX[BOX]=1
    FLAGBOX[MAX]=1
    FLAGBOX[MODE]="EDIT"
    for ((I=1;I<=${FLAGBOX_SIZE};I++)); do
      FLAGBOX[1,${I}]=''
    done

# }}}

  else
    IFS=$'\n' read -d "" -ra LOADED_ENV < ${PPID}

    local FLAGBOX_SIZE="${LOADED_ENV[1]}"
    local FLAGBOX_KEY1="${LOADED_ENV[2]}"
    local FLAGBOX_KEY2="${LOADED_ENV[3]}"
    local FLAGBOX_DECIMAL_NAVMODE="${LOADED_ENV[4]}"
    local FLAGBOX_BACKUPCONFIRM="${LOADED_ENV[5]}"
    local FLAGBOX_VINSERT="${LOADED_ENV[6]}"
    local FLAGBOX_VNAV="${LOADED_ENV[7]}"
    local FLAGBOX_VRESET="${LOADED_ENV[8]}"
    local FLAGBOX_VRESTORE="${LOADED_ENV[9]}"
    local FLAGBOX_FOLDLISTING="${LOADED_ENV[10]}"
    FLAGBOX[BOX]="${LOADED_ENV[11]}"
    FLAGBOX[MAX]="${LOADED_ENV[12]}"
    FLAGBOX[MODE]="${LOADED_ENV[13]}"
    if [[ ${#LOADED_ENV} -gt 14 ]]; then
      local I=1
      local J=1
      for FLAG in ${LOADED_ENV[@]:14}; do
        FLAGBOX[${I},${J}]="${FLAG}"
        (( I+=1 ))
        if [[ ${I} -gt ${FLAGBOX_SIZE} ]]; then
          (( I=1 ))
          (( J+=1 ))
          if [[ ${J} -gt ${FLAGBOX[MAX]} ]]; then
            break
          fi
        fi
      done
    fi

  fi

  local CURRENT_ENV="${NOW}\n"
  CURRENT_ENV="${FLAGBOX_SIZE}\n"
  CURRENT_ENV="${FLAGBOX_KEY1}\n"
  CURRENT_ENV="${FLAGBOX_KEY2}\n"
  CURRENT_ENV="${FLAGBOX_DECIMAL_NAVMODE}\n"
  CURRENT_ENV="${FLAGBOX_BACKUPCONFIRM}\n"
  CURRENT_ENV="${FLAGBOX_VINSERT}\n"
  CURRENT_ENV="${FLAGBOX_VNAV}\n"
  CURRENT_ENV="${FLAGBOX_VRESET}\n"
  CURRENT_ENV="${FLAGBOX_VRESTORE}\n"
  CURRENT_ENV="${FLAGBOX_FOLDLISTING}\n"
  CURRENT_ENV="${FLAGBOX[BOX]}\n"
  CURRENT_ENV="${FLAGBOX[MAX]}\n"
  CURRENT_ENV="${FLAGBOX[MODE]}\n"
  CURRENT_ENV="$(
    for ((I=1;I<=${FLAGBOX[MAX]};I++)); do
      for ((J=1;J<=${FLAGBOX_SIZE};J++)); do
        echo ${FLAGBOX[${I},${J}]}
      done
    done
  )"

  echo -e "${CURRENT_ENV}" > ${PPID}
}

main "${@}"
